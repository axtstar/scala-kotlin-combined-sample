/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package exposed.kotlin.sample

import org.jetbrains.exposed.dao.IntEntity
import org.jetbrains.exposed.dao.IntEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.IdTable
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.transactions.transaction

fun main(args: Array<String>) {
    DBConnect.init()
    DynamicTables.getTest()
}

object DBConnect{
    fun init(){
        Database.connect(
                "jdbc:postgresql://localhost:5432/dvdrental"
                , driver = "org.postgresql.Driver"
                , user = "postgres"
                , password = "postgres")
    }
}

object DynamicTables : IdTable<Int>() {
    override val tableName: String
        get() = internalTableName

    val city_id = integer("city_id")
    val city = text("city")
    val country_id = integer("country_id")

    override val id: Column<EntityID<Int>> = city_id.entityId()

    var internalTableName = "city"

    fun getTest() {
        transaction {
            // print sql to std-out
            addLogger(StdOutSqlLogger)

            val result = DynamicTable.all()
            println("master: ${result.count()}")
            for ( x in result) {
                println("id: ${x.id} city: ${x.city} country_id: ${x.country_id}")
            }
        }
    }

    fun getRawSql() {
        transaction {
            // print sql to std-out
            addLogger(StdOutSqlLogger)

            val result = DynamicTable.all()
            println("master: ${result.count()}")
            for ( x in result) {
                println("id: ${x.city_id} city: ${x.city} country_id: ${x.country_id}")
            }
        }

    }
}

class DynamicTable(id: EntityID<Int>): IntEntity(id) {
    companion object : IntEntityClass<DynamicTable>(DynamicTables)

    var city_id by DynamicTables.city_id
    var city by DynamicTables.city
    var country_id by DynamicTables.country_id

}
